{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","App.js","serviceWorker.js","index.js"],"names":["userAccessToken","SearchBar","props","getTerm","bind","getSearchResult","state","term","e","newTerm","target","value","this","setState","onSearch","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","console","log","tracks","map","key","id","SearchResults","searchResults","PlayList","handleNameChange","newName","onChangeName","defaultValue","playListTracks","onSave","spotifyAPI","Spotify","getAccessToken","undefined","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","accessToken","fetch","headers","Authorization","then","response","json","responseJson","items","artists","uri","savePlaylist","trackUris","length","userID","jsonResponse","method","body","JSON","stringify","playlistID","uris","App","playListName","updatePlaylistName","foundTracks","find","savedTrack","push","filter","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.13c5e0f6.chunk.js","sourcesContent":["let userAccessToken\nconst clientID = '9971d60ab54a45ad9add570eb80b43f7';\nconst redirectUri = 'https://t3ssk.github.io/jammming-project/';\nconst spotifyAPI = 'https://api.spotify.com/v1/'\n\nexport const Spotify = {\n    \n    getAccessToken(){\n        if(userAccessToken !== undefined){\n            return userAccessToken\n        } \n\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/)\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/)\n        if (accessTokenMatch && expiresInMatch){\n            userAccessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1])\n            window.setTimeout(()=>userAccessToken=\"\", expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/')\n            return userAccessToken\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\n            window.location.href = accessUrl\n        }\n    },\n    search(term){\n        const accessToken = Spotify.getAccessToken();\n        return fetch(spotifyAPI + `search?type=track&q=${term}`, {headers: {Authorization: `Bearer ${accessToken}`}})\n            .then((response)=>{\n                    return response.json()   \n            })\n            .then((responseJson)=>{\n                if(!responseJson.tracks){\n                    return []\n                } else {\n                    return responseJson.tracks.items.map(track=> {return {\n                        id: track.id, \n                        name: track.name,\n                        artist: track.artists[0].name,\n                        album: track.album.name,\n                        uri: track.uri\n                    }})\n                }\n            })\n    },\n    savePlaylist(name, trackUris){\n        if(!name || !trackUris.length){return}\n        const accessToken = Spotify.getAccessToken();\n        const headers = {Authorization: `Bearer ${accessToken}`};\n        let userID\n        return fetch(spotifyAPI + 'me', {headers: headers})\n                        .then((response)=>{\n                            return response.json()\n                        })\n                        .then((jsonResponse)=>{\n                            userID = jsonResponse.id\n                            return fetch(spotifyAPI + `users/${userID}/playlists`, {headers: headers, method: 'POST', body: JSON.stringify({name: name})})\n                                        .then((response)=>{return response.json()})\n                                        .then((jsonResponse)=>{const playlistID = jsonResponse.id\n                                        \n                                    return fetch(spotifyAPI + `/v1/users/${userID}/playlists/${playlistID}/tracks`, {headers: headers, method: 'POST', body: JSON.stringify({uris: trackUris})})})\n                        })\n    }\n} \n\n\n","import React from 'react'\nimport './SearchBar.css'\n\nexport class SearchBar extends React.Component{\n    constructor(props){\n        super(props);\n        this.getTerm = this.getTerm.bind(this)\n        this.getSearchResult = this.getSearchResult.bind(this)\n        this.state = {term: \"\"}\n    }  \n    \n    getTerm(e){\n        let newTerm = e.target.value\n        this.setState({term: newTerm})\n    }\n    getSearchResult(){\n        \n        this.props.onSearch(this.state.term)\n    }\n    render(){\n        return (<div className=\"SearchBar\">\n                    <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.getTerm}/>\n                    <button className=\"SearchButton\" onClick={this.getSearchResult}>SEARCH</button>\n                </div>\n                )\n\n    }\n\n}","import React from 'react';\nimport './Track.css';\n\nexport class Track extends React.Component{\n    constructor(props){\n        super(props)\n        this.addTrack = this.addTrack.bind(this)\n        this.removeTrack = this.removeTrack.bind(this)\n    }\n\n    renderAction(){\n        if(this.props.isRemoval){\n           return (<button className=\"Track-action\" onClick={this.removeTrack}>-</button>)\n        } else {return (<button className=\"Track-action\" onClick={this.addTrack}>+</button>)}\n    }\n    addTrack(){\n        this.props.onAdd(this.props.track)\n    }\n    removeTrack(){\n        this.props.onRemove(this.props.track)\n    }\n    render(){\n        const track=this.props.track\n        return(\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{track.name}</h3>\n                    <p>{track.artist} | {track.album} </p>\n                </div>\n                {this.renderAction()}\n            </div>\n        )\n    }\n\n}","import React from 'react';\nimport './TrackList.css';\nimport { Track } from '../Track/Track'\n\nexport class TrackList extends React.Component{\n    \n    render(){\n        console.log(this.props.tracks)\n        return (\n        <div className=\"TrackList\">\n            \n            {this.props.tracks.map((track)=>{return <Track track={track} key={track.id} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval}/>})}\n        </div>)\n    }\n}\n","import React from 'react';\nimport './SearchResults.css';\nimport { TrackList } from '../TrackList/TrackList';\n\nexport class SearchResults extends React.Component {\n  render(){\n    return(\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}/>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport './Playlist.css';\nimport { TrackList } from '../TrackList/TrackList'\n\nexport class PlayList extends React.Component{\n    constructor(props){\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this)\n    }\n    handleNameChange(e){\n        const newName = e.target.value\n        this.props.onChangeName(newName)\n    }\n    render(){\n        return(\n            <div className=\"Playlist\">\n                    <input defaultValue={\"New Playlist\"} value={this.props.value} onChange={this.handleNameChange}/>\n                    <TrackList tracks={this.props.playListTracks} onRemove={this.props.onRemove} isRemoval={true}/>\n                    <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport { SearchBar } from './components/SearchBar/SearchBar';\nimport { SearchResults } from './components/SearchResults/SearchResults';\nimport { PlayList } from './components/Playlist/Playlist';\nimport { Spotify } from './util/Spotify';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={searchResults: [],\n    playListName: 'New playlist', \n    playListTracks: []};\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this)\n    this.savePlaylist = this.savePlaylist.bind(this)\n    this.search = this.search.bind(this)\n  }\n  addTrack(track){\n    const tracks = this.state.playListTracks\n    let foundTracks = this.state.searchResults\n    if(tracks.find(savedTrack => savedTrack.id === track.id)){\n      return\n    }\n    else {\n      tracks.push(track)\n      foundTracks = foundTracks.filter(removeTrack=>{return removeTrack.id !== track.id});\n      this.setState({\n        searchResults: foundTracks,\n        playListTracks: tracks});\n      \n    }\n  }\n  removeTrack(track){\n    let tracks = this.state.playListTracks\n    let foundTracks = this.state.searchResults\n    tracks = tracks.filter(removeTrack=>{return removeTrack.id !== track.id})\n    if(foundTracks.find(savedTrack => savedTrack.id === track.id)){\n      return\n    }\n    else {\n      foundTracks.push(track)\n    }\n    this.setState({searchResults: foundTracks,\n                    playListTracks: tracks})\n    \n  }\n  updatePlaylistName(newName){\n      this.setState({playListName: newName})\n  }\n  savePlaylist(){\n    const trackUris = this.state.playListTracks.map(track=> track.uri)\n    console.log(trackUris)\n      Spotify.savePlaylist(this.state.playListName, trackUris).then(()=>{\n        this.setState({playListName: 'New Playlist',\n        playListTracks: []})\n      })\n  }\n  search(term){\n      Spotify.search(term).then(searchResults => {this.setState({searchResults: searchResults})})\n  }\n  render(){\n  return (\n    <div>\n     <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n      <div className=\"App\">\n       <SearchBar onSearch={this.search}/>\n       <div className=\"App-playlist\">\n        <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} />\n        <PlayList playListName={this.state.playListName} playListTracks={this.state.playListTracks} onRemove={this.removeTrack} onChangeName={this.updatePlaylistName} value={this.state.playListName} onSave={this.savePlaylist}/>\n        </div>\n      </div>\n    </div>\n  );}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}